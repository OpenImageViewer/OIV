#root CMake file
cmake_minimum_required(VERSION 3.8)
project(OpenImageViewer)
set(CMAKE_CXX_STANDARD 17)


option(OIV_OFFICIAL_BUILD "Build official release of OIV" FALSE)



if ( ${CMAKE_BUILD_TYPE} STREQUAL "Debug")
#Debug build
    set(OIV_BUILD_TYPE_STR "Debug")
    set(OIV_BUILD_TYPE_ID 0)
	add_definitions(-DOIV_BUILD_TYPE=0)
elseif (${CMAKE_BUILD_TYPE} STREQUAL "RelWithDebInfo")
    
    if(OIV_OFFICIAL_BUILD)  #Official release build (publish)
        add_definitions(-DOIV_OFFICIAL_BUILD=1)
        set(OIV_BUILD_TYPE_STR "Publish")
        set(OIV_BUILD_TYPE_ID 2)
	    add_definitions(-DOIV_BUILD_TYPE=2)
    else()  # Release build
        set(OIV_BUILD_TYPE_STR "Release")
        set(OIV_BUILD_TYPE_ID 1)
	    add_definitions(-DOIV_BUILD_TYPE=1)
    endif()
else()
    message(FATAL_ERROR "Unknown build configuration" )
endif()



if ( ${OIV_BUILD_TYPE_STR} STREQUAL "Release" OR ${OIV_BUILD_TYPE_STR} STREQUAL "Publish")
    if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
        #MSVC optimizations
        #compiler optimizations
        add_compile_options(/O2)    #maximum optimization
	    add_compile_options(/Ob2)   #inline function expansion
        add_compile_options(/Oi)    #enable instrinsic functions
        add_compile_options(/Ot)    #favor fast code
        add_compile_options(/Oy)    #Omit frame pointers
        add_compile_options(/GT)    #enalbe fiber safe optimiations

        #linker optimizations
        add_link_options(/OPT:REF)  #remove unreferenced code/data
        add_link_options(/OPT:ICF)  #enable COMDAT folding
        
        #   Publish specific optimization flags
        if (${OIV_BUILD_TYPE_STR} STREQUAL "Publish")
           add_compile_options(/GL)    #whole program optimization
           add_link_options(/LTCG)     #link time code generation
        endif()

    endif()



elseif (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    add_definitions(-DOIV_BUILD_TYPE=1)
elseif (${CMAKE_BUILD_TYPE} STREQUAL "Publish")
    add_definitions(-DOIV_BUILD_TYPE=2)
    
endif()

if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wextra -Wpedantic)
  # using Clang
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  # using GCC
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    #add_compile_options(/W1)
# using Visual Studio C++
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
endif()



set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

#include_directories(./External/LLUtils/Include)
add_compile_definitions(UNICODE _UNICODE NOMINMAX)
add_definitions(-DLLUTILS_ENABLE_DEBUG_SYMBOLS=1)

add_subdirectory(oivlib)
add_subdirectory(Clients/OIViewer)
