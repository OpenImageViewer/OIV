#root CMake file
cmake_minimum_required(VERSION 3.8)
project(OpenImageViewer)
set(CMAKE_CXX_STANDARD 17)


option(OIV_OFFICIAL_BUILD "Build official release of OIV" FALSE)

# Define Release by default.
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release")
  message(STATUS "Build type not specified: Use Release by default.")
endif(NOT CMAKE_BUILD_TYPE)


#todo: fix OIV_BUILD_TYPE for debug

add_compile_definitions($<$<CONFIG:DEBUG>:OIV_BUILD_TYPE=0>)
set(OIV_BUILD_TYPE 0)

if (OIV_OFFICIAL_BUILD)
    set(OIV_BUILD_TYPE 2)
    add_compile_definitions($<$<CONFIG:RELEASE>:OIV_BUILD_TYPE=2>)
else()
    set(OIV_BUILD_TYPE 1)
    add_compile_definitions($<$<CONFIG:RELEASE>:OIV_BUILD_TYPE=1>)
endif()


if (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    #MSVC optimizations
    #compiler optimizations
    add_compile_options($<$<CONFIG:RELEASE>:/O2>)    #maximum optimization
    add_compile_options($<$<CONFIG:RELEASE>:/Ob2>)   #inline function expansion
    add_compile_options($<$<CONFIG:RELEASE>:/Oi>)    #enable instrinsic functions
    add_compile_options($<$<CONFIG:RELEASE>:/Ot>)    #favor fast code
    add_compile_options($<$<CONFIG:RELEASE>:/Oy>)    #Omit frame pointers
    add_compile_options($<$<CONFIG:RELEASE>:/GT>)    #enalbe fiber safe optimiations
    
    #linker optimizations
    add_link_options($<$<CONFIG:RELEASE>:/OPT:REF>)  #remove unreferenced code/data
    add_link_options($<$<CONFIG:RELEASE>:/OPT:ICF>)  #enable COMDAT folding
    
    #   Publish specific optimization flags
    if (OIV_OFFICIAL_BUILD)
       add_compile_options($<$<CONFIG:RELEASE>:/GL>)    #whole program optimization
       add_link_options($<$<CONFIG:RELEASE>:/LTCG>)     #link time code generation
    endif()

    #Always generate debug info
    add_link_options(/DEBUG)    #(Generate Debug Info)
    add_compile_options(/Zi)    #whole program optimization
    add_compile_options($<$<CONFIG:RELEASE>:/Zo>)    #Enhance Optimized Debugging
endif()    



if (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    add_compile_options(-Wextra -Wpedantic)
  # using Clang
elseif (CMAKE_CXX_COMPILER_ID MATCHES "GNU")
  # using GCC
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Intel")
  # using Intel C++
elseif (CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
    add_compile_options(/permissive-)
    #add_compile_options(/W1)
# using Visual Studio C++
  if(CMAKE_CXX_FLAGS MATCHES "/W[0-4]")
    string(REGEX REPLACE "/W[0-4]" "/W4" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")
  else()
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /W4")
  endif()
endif()



set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR})

#include_directories(./External/LLUtils/Include)
add_compile_definitions(UNICODE _UNICODE NOMINMAX)
add_definitions(-DLLUTILS_ENABLE_DEBUG_SYMBOLS=1)

add_subdirectory(oivlib)
add_subdirectory(Clients/OIViewer)
